[{"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\index.tsx":"1","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\store\\data\\countNum.ts":"2","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\components\\authRoute.tsx":"3","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\breadcrumb.tsx":"4","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\utils\\index.ts":"5","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\userUtils.tsx":"6","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\footer.tsx":"7","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\sider.tsx":"8","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\content.tsx":"9"},{"size":490,"mtime":1610284588456,"results":"10","hashOfConfig":"11"},{"size":467,"mtime":1609771611120,"results":"12","hashOfConfig":"11"},{"size":1676,"mtime":1610289151778,"results":"13","hashOfConfig":"11"},{"size":1268,"mtime":1610294878303,"results":"14","hashOfConfig":"11"},{"size":519,"mtime":1610295224658,"results":"15","hashOfConfig":"11"},{"size":3195,"mtime":1610552293207,"results":"16","hashOfConfig":"11"},{"size":265,"mtime":1610373543057,"results":"17","hashOfConfig":"11"},{"size":2775,"mtime":1610552933362,"results":"18","hashOfConfig":"11"},{"size":1457,"mtime":1610468464385,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"115ahtm",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\index.tsx",[],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\store\\data\\countNum.ts",[],["42","43"],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\components\\authRoute.tsx",[],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\breadcrumb.tsx",["44"],"import React, { FC } from \"react\";\r\nimport { Breadcrumb } from \"antd\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport Routers from \"../router\";\r\nimport { treeToList } from \"../utils\";\r\n\r\nlet list = treeToList(Routers);\r\nconst Breadcrumbs: FC = () => {\r\n  const pathSnippets = useLocation()\r\n    .pathname.split(\"/\")\r\n    .filter((i) => i);\r\n  const extraBreadcrumbItems = pathSnippets.map((_, index) => {\r\n    const url = `/${pathSnippets.slice(0, index + 1).join(\"/\")}`;\r\n    return (\r\n      <Breadcrumb.Item key={url}>\r\n        {list.map((item) => {\r\n          if (item.path === url && item.childrens) {\r\n            return (\r\n              <Link key={url} to={item.childrens[0].path}>\r\n                {item.title}\r\n              </Link>\r\n            );\r\n          } else if (item.path === url) {\r\n            return (\r\n              <Link key={url} to={item.path}>\r\n                {item.title}\r\n              </Link>\r\n            );\r\n          }\r\n        })}\r\n      </Breadcrumb.Item>\r\n    );\r\n  });\r\n  const breadcrumbItems = [\r\n    <Breadcrumb.Item key=\"home\">\r\n      <Link to=\"/\">主页</Link>\r\n    </Breadcrumb.Item>,\r\n  ].concat(extraBreadcrumbItems);\r\n  return <Breadcrumb>{breadcrumbItems}</Breadcrumb>;\r\n};\r\n\r\nexport default Breadcrumbs;\r\n",["45","46"],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\utils\\index.ts",[],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\userUtils.tsx",[],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\footer.tsx",[],"C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\sider.tsx",["47"],"import React, { FC } from \"react\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { createFromIconfontCN } from \"@ant-design/icons\";\r\nimport { permissionList } from \"../mock/permissions\";\r\nimport Routers from \"../router/index\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nconst IconFont = createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js\",\r\n});\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\ninterface props {\r\n  fPath?: string;\r\n}\r\nconst Siders: FC = () => {\r\n  const selectPath = useHistory<props>().location;\r\n  const defaultOpenKeys = [\r\n    selectPath.state && selectPath.state.fPath ? selectPath.state.fPath : \"\",\r\n  ];\r\n  //根据后端返回对菜单排序\r\n  const sortMenu = (Routers: shouldRenderProps[]) => {\r\n    let arr = [];\r\n    for (let item of permissionList) {\r\n      for (let menu of Routers) {\r\n        if (item === menu.path) {\r\n          if (!menu.childrens) {\r\n            arr.push(menu);\r\n          } else {\r\n            let childrens = sortMenu(menu.childrens);\r\n            menu.childrens = childrens;\r\n            arr.push(menu);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return arr;\r\n  };\r\n  //是否返回导航按钮\r\n  const shouldReturnLink = (item: shouldRenderProps) => {\r\n    if (item.path !== selectPath.pathname) {\r\n      return (\r\n        <Link\r\n          to={{\r\n            pathname: item.path,\r\n            state: item.fPath ? { fPath: item.fPath } : \"\",\r\n          }}\r\n        >\r\n          {item.title}\r\n        </Link>\r\n      );\r\n    } else {\r\n      return <span style={{ cursor: \"pointer\" }}>{item.title}</span>;\r\n    }\r\n  };\r\n  //根据后端返回permissionList动态加载路由\r\n  const renderMenu = (Routers: shouldRenderProps[]) => {\r\n    return Routers.map((item) => {\r\n      if (!item.childrens && !item.hidden) {\r\n        return (\r\n          <Menu.Item\r\n            key={item.path}\r\n            icon={item.icon && <IconFont type={item.icon} />}\r\n          >\r\n            {shouldReturnLink(item)}\r\n          </Menu.Item>\r\n        );\r\n      } else if (item.childrens && !item.hidden) {\r\n        return (\r\n          <SubMenu\r\n            key={item.path}\r\n            icon={item.icon && <IconFont type={item.icon} />}\r\n            title={item.title}\r\n          >\r\n            {renderMenu(item.childrens)}\r\n          </SubMenu>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Sider breakpoint=\"lg\" collapsedWidth=\"0\">\r\n      <div className=\"logo\" />\r\n      <Menu\r\n        theme=\"dark\"\r\n        mode=\"inline\"\r\n        defaultOpenKeys={defaultOpenKeys}\r\n        defaultSelectedKeys={[selectPath.pathname]}\r\n        selectedKeys={[selectPath.pathname]}\r\n      >\r\n        {renderMenu(sortMenu(Routers))}\r\n      </Menu>\r\n    </Sider>\r\n  );\r\n};\r\n\r\nexport default Siders;\r\n","C:\\Users\\qiqi\\Desktop\\webAssembly-app\\src\\layout\\content.tsx",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":16,"column":26,"nodeType":"55","messageId":"56","endLine":16,"endColumn":28},{"ruleId":"49","replacedBy":"57"},{"ruleId":"51","replacedBy":"58"},{"ruleId":"53","severity":1,"message":"54","line":58,"column":31,"nodeType":"55","messageId":"56","endLine":58,"endColumn":33},{"ruleId":"53","severity":1,"message":"54","line":17,"column":23,"nodeType":"55","messageId":"56","endLine":17,"endColumn":25},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["59"],["60"],"no-global-assign","no-unsafe-negation"]